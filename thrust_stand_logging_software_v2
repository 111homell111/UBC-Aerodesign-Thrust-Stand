'''
    Purpose: I hate APSC 160
    Purpose: Control thrust stand dfj;;lkafslkjfjdkla;fadf;jdsfj;ksfjk;la

'''



'''-----------------Import Libraries----------------'''
from curses import window
import tkinter as tk
from tkinter import ttk
from tkinter import simpledialog
import serial
import os
from openpyxl import Workbook
from openpyxl import load_workbook
import time
import asyncio
from datetime import datetime

#Will need these bottom two imports to plot/display realtime data
#import matplotlib.pyplot as plt
#import matplotlib.animation as animation


'''---------------Set Up Arduino -----------------'''
# port = '/dev/cu.usbmodem11301' #You can find the port on the bottom right of
port = '/dev/cu.usbserial-1130' #You can find the port on the bottom right of
baud_rate = 9600 #Idk it just has to match the Arduino's code (Prolly use 115200 or 9600 for now)
arduino = serial.Serial(port, baud_rate)



'''-------------------??? :D---------------------'''
__location__ = os.path.realpath(
    os.path.join(os.getcwd(), os.path.dirname(__file__)))
INPUTLIST = [fname for fname in os.listdir(__location__) if fname.endswith('.txt')]
OUTPUTLIST = [fname for fname in os.listdir(__location__) if fname.endswith('.xlsx')]
WINDOW_WIDTH = "1000"
WINDOW_HEIGHT = "800"
BUTTON_HEIGHT = 3
BUTTON_WIDTH = 10
MODES = ["Automatic", "Manual", "Timed"]



'''------The Real Stuff--------'''
class Thrust_Gui:
    def __init__(self, window):
        self.mode = MODES[0]
        '''-------------Create Main Window-------------'''
        self.window = window 
        self.title = window.title("Thrust Stand Controller")
        self.size = window.geometry(WINDOW_WIDTH + "x" + WINDOW_HEIGHT)


        '''------------------Create Widgets-----------------'''
        self.file_menu = ttk.Combobox(window, values = INPUTLIST, state="readonly", width = BUTTON_WIDTH + 1,)
        self.output_menu = ttk.Combobox(window, values = OUTPUTLIST, state="readonly", width = BUTTON_WIDTH + 1,)

        self.mode_value = tk.StringVar(window)
        self.mode_value.set(self.mode)
        self.select_mode = tk.OptionMenu(window, self.mode_value, *MODES, command = self.change_mode)

        self.start_button = tk.Button(window, command = self.start, text = "Start" )
        self.motor_slider = tk.Scale(window, from_ = 0, to = 180, orient = 'vertical', command = self.slider, length = 200, label = "Motor")

        self.window.bind("<Up>", lambda e: self.motor_slider.set(self.motor_slider.get()-10))
        self.window.bind("<Down>", lambda e: self.motor_slider.set(self.motor_slider.get()+10))
        

        '''------------------Format Widgets-------------------'''
        self.start_button.config(width = BUTTON_WIDTH, height = BUTTON_HEIGHT)


        '''----------------Place Widgets-----------------'''
        self.select_mode.place(relx = 0.05, rely = 0.05)
        self.file_menu.place(relx = 0.05, rely = 0.3)
        self.motor_slider.place(relx = 0.40, rely = 0.3)
        self.start_button.place(relx = 0.05, rely = 0.15)
        self.output_menu.place(relx = 0.05, rely = 0.35)


        '''-----------------Work Book------------------'''
        #file path idfk

        #wb = load_workbook(filename = (os.path.join(__location__, 'Test_data')+'.xlsx'))
        #ws = wb.active
        #ws['A1'] = 42
        #wb.save((os.path.join(__location__, 'Test_data'+'.xlsx')))


        '''----------saaaaaa-----------'''



    '''-------------------Create Functions------------------'''
    def start(self):

        if self.mode == 'Automatic':
            if self.file_menu.get() == '':
                tk.messagebox.showinfo (title = 'Error', message = 'No input file selected!', icon = 'warning')
                return 0
            input_file = open(os.path.join(__location__, self.file_menu.get()), 'r')
            input_list = [line .rstrip('\n') for line in input_file.readlines()]
            input_list.append("000000")

        wb = load_workbook(filename = (os.path.join(__location__, 'Test_data')+'.xlsx'))
        ws = wb.active
        for i in range (len(input_list)):
            line = input_list[i]
            duration = int(line[3:])
            throttle = int(line[:3])
            self.window.after(duration * 1000, self.send_throttle(throttle))
            print('Test: ', line)   
            getData=arduino.readline()
            dataString = getData.decode('utf-8')
            data=dataString[0:][:-2]
            print(data)
            readings = data.split(",")
            print(readings)
            ws['A' + str(i+1)] = line
            ws['B' + str(i+1)] = data
            #ws['C' + str(i+1)] = data[1]
        print('finished')
        wb.save((os.path.join(__location__, 'Test_data'+'.xlsx')))


    


    def send_throttle(self, throttle):
        string = 'X{0:d}'.format(throttle)
        arduino.write(string.encode('utf-8'))


    def stop(self):
        string = 'X0'
        arduino.write(string.encode('utf-8'))
        
        
    def slider(self, throttle):
        throttle = int(throttle) #for slider LOL or like just in case ig :) i would prefer to just pass ints... should i>??????a number
        string = 'X{0:d}'.format(throttle)
        arduino.write(string.encode('utf-8'))
        x = 0
        while (x<1):
            getData=arduino.readline()
            dataString = getData.decode('utf-8')
            data=dataString[0:][:-2]
            print(data)
            readings = data.split(",")
            print(readings)
            x+=1

    def change_mode(self, new_mode):
        if new_mode == MODES[0]:
            self.file_menu["state"] = "readonly"
        elif new_mode == MODES[1]:
            self.file_menu["state"] = "disabled"
        elif new_mode == MODES[2]:
            self.file_menu["state"] = "disabled"
        self.mode = new_mode
        
 

'''------------------Run Code---------------'''
#def exit(): #This is very much a useless roundabout way but like whatever works works
#   string = 'X0'
#    arduino.write(string.encode('utf-8'))
#    root.destroy()
root = tk.Tk()
app = Thrust_Gui(root)
root.mainloop()
#root.protocol("WM_DELETE_WINDOW", exit)



